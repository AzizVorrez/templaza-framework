<?php

namespace TemPlazaFramework\Post_Type;

defined('TEMPLAZA_FRAMEWORK') or exit();

use TemPlazaFramework\Admin_Functions;
use TemPlazaFramework\Core\Fields;
use TemPlazaFramework\Functions;
use TemPlazaFramework\Post_Type;

if(!class_exists('TemPlazaFramework\Post_Type\Templaza_Style')){
    class Templaza_Style extends Post_Type{
        public $setting_args;

        public function register()
        {
            $theme  = $this -> theme;
            $labels = array(
                'name'               => _x( $theme->get('Name').' Templates', 'templaza-framework', $this -> text_domain ),
                'singular_name'      => _x( $theme->get('Name').' Templates', 'templaza-framework', $this -> text_domain ),
                'menu_name'          => _x( $theme->get('Name').' Options', 'templaza-framework', $this -> text_domain ),
                'name_admin_bar'     => _x( $theme->get('Name').' Options', 'templaza-framework', $this -> text_domain ),
                'add_new'            => _x( 'Add New', 'templaza-framework', $this -> text_domain ),
                'add_new_item'       => __( 'Add New template', $this -> text_domain),
                'new_item'           => __( 'New template', $this -> text_domain ),
                'edit_item'          => __( 'Edit template', $this -> text_domain),
                'view_item'          => __( 'View template', $this -> text_domain ),
                'all_items'          => __( 'All templates', $this -> text_domain ),
                'search_items'       => __( 'Search templates', $this -> text_domain ),
                'parent_item_colon'  => __( 'Parent templates:', $this -> text_domain ),
                'not_found'          => __( 'No templates found.', $this -> text_domain ),
                'not_found_in_trash' => __( 'No templates found in Trash.', $this -> text_domain )
            );

            $args = array(
                'labels'             => $labels,
                'description'        => __( 'Description.', $this -> text_domain ),
                'public'             => false,
                'publicly_queryable' => false,
                'show_ui'            => true,
                'show_in_menu'       => true,
                'query_var'          => false,
                'rewrite'            => array( 'slug' => 'templaza-framework' ),
                'capability_type'    => 'post',
                'has_archive'        => false,
                'hierarchical'       => false,
                'menu_position'      => null,
                'supports'           => array( 'title' ),
                'menu_icon'          => 'dashicons-art'
            );
            return $args;
        }

        public function init()
        {

            parent::init(); // TODO: Change the autogenerated stub

//            if($this ->my_post_type_exists()){
            $this -> init_main_options();
//            }

            // Load meta boxes
            require_once TEMPLAZA_FRAMEWORK_INCLUDES_PATH.'/metabox.php';

            // Require file from theme to override meta_box
            $theme_metabox_file = TEMPLAZA_FRAMEWORK_THEME_PATH_METABOXES.'/metabox.php';
            if(file_exists($theme_metabox_file)) {
                require_once $theme_metabox_file;
            }

            // Load all meta boxes from plugin
            $this -> load_metaboxes(TEMPLAZA_FRAMEWORK_METABOXES_PATH);
            // Load all meta boxes from theme
            $this -> load_metaboxes(TEMPLAZA_FRAMEWORK_THEME_PATH_METABOXES);

        }



        private function add_widget_instance( $id_base, $next_id, $menu_item_id, $is_grid_widget ) {

            $current_widgets = get_option( 'widget_' . $id_base );

            $current_widgets[ $next_id ] = array(
                "mega_menu_columns" => 2,
                "mega_menu_parent_menu_id" => $menu_item_id
            );

            if ( $is_grid_widget ) {
                $current_widgets[ $next_id ] = array(
                    "mega_menu_is_grid_widget" => 'true'
                );
            }

            update_option( 'widget_' . $id_base, $current_widgets );

        }
        private function set_mega_menu_sidebar_widgets( $widgets ) {

            $sidebar_widgets = wp_get_sidebars_widgets();

            $sidebar_widgets[ 'mega-menu' ] = $widgets;

            wp_set_sidebars_widgets( $sidebar_widgets );

        }
        private function add_widget_to_sidebar( $id_base, $next_id ) {

            $widget_id = $id_base . '-' . $next_id;

            $sidebar_widgets = $this->get_mega_menu_sidebar_widgets();

            $sidebar_widgets[] = $widget_id;

            $this->set_mega_menu_sidebar_widgets($sidebar_widgets);

            do_action( "megamenu_after_widget_add" );

            return $widget_id;

        }
        public function get_mega_menu_sidebar_widgets() {

            $sidebar_widgets = wp_get_sidebars_widgets();

            if ( ! isset( $sidebar_widgets[ 'mega-menu'] ) ) {
                return false;
            }

            return $sidebar_widgets[ 'mega-menu' ];

        }
        public function add_widget( $id_base, $menu_item_id, $title, $is_grid_widget ) {

            require_once( ABSPATH . 'wp-admin/includes/widgets.php' );

            $next_id = next_widget_id_number( $id_base );

            $this->add_widget_instance( $id_base, $next_id, $menu_item_id, $is_grid_widget );

            $widget_id = $this->add_widget_to_sidebar( $id_base, $next_id );

            $return  = '<div class="widget" title="' . esc_attr( $title ) . '" data-columns="2" id="' . $widget_id . '" data-type="widget" data-id="' . $widget_id . '">';
            $return .= '    <div class="widget-top">';
            $return .= '        <div class="widget-title-action">';

            if ( ! $is_grid_widget ) {
                $return .= '            <a class="widget-option widget-contract" title="' . esc_attr( __("Contract", "megamenu") ) . '"></a>';
                $return .= '            <span class="widget-cols"><span class="widget-num-cols">2</span><span class="widget-of">/</span><span class="widget-total-cols">X</span></span>';
                $return .= '            <a class="widget-option widget-expand" title="' . esc_attr( __("Expand", "megamenu") ) . '"></a>';
            }

            $return .= '            <a class="widget-option widget-action" title="' . esc_attr( __("Edit", "megamenu") ) . '"></a>';
            $return .= '        </div>';
            $return .= '        <div class="widget-title">';
            $return .= '            <h4>' . esc_html( $title ) . '</h4>';

            if ( $is_grid_widget ) {
                $return .= '            <span class="widget-desc">' .  esc_html( $title ) . '</span>';
            }

            $return .= '        </div>';
            $return .= '    </div>';
            $return .= '    <div class="widget-inner widget-inside"></div>';
            $return .= '</div>';

            return $return;

        }
        public function ajax_show_widget_form(){

//            if(get_the_ID() == 2583) {
                global $wp_registered_widgets, $wp_widget_factory, $wp_registered_widget_controls;
//
////                require_once get_home_path()."/wp-admin/includes/widgets.php";
//////                var_dump($wp_registered_widgets);
//////                var_dump(wp_list_widgets());
//////                wp_list_widgets();
//////                var_dump($wp_widget_factory->widgets);
//                $widget = 'WP_Widget_Recent_Posts';
                $widget = 'WP_Widget_Text';

            require_once( ABSPATH . 'wp-admin/includes/widgets.php' );
//////                var_dump(the_widget('WP_Widget_Recent_Posts'));
//                $widget_id  = 'recent-posts-1';
                $widget_id = 'text-4';
////                var_dump($wp_registered_widgets[$widget_id]);
                $control = isset($wp_registered_widget_controls[$widget_id]) ? $wp_registered_widget_controls[$widget_id] : array();

//                var_dump($control['callback']);
                if ( is_callable( $control['callback'] ) ) {
                    $title  = 'Text';
                    $output  = '<div class="widget" title="' . esc_attr( $title )
                        . '" data-columns="2" id="' . $widget_id . '" data-type="widget" data-id="' . $widget_id . '">';
//                    $output .= '    <div class="widget-top">';
//                    $output .= '        <div class="widget-title-action">';
                    $output .= '<div class="widget-inner widget-inside" style="display: block;">';
                    $output .= '<div class="form">';
                    $output .= '<div class="widget-content">';
                    ob_start();
                        call_user_func_array( $control['callback'], $control['params'] );
                        $output .= ob_get_contents();
                    ob_end_clean();
//                                $output .= '</div>';
//                            $output .= '</div>';
                            $output .= '<input type="hidden" name="widget-id" class="widget-id" value="'.esc_attr( $widget_id ).'" />';
                            $output .= '<input type="hidden" name="id_base" class="id_base" value="text">';
                            $output .= '</div>';
                            $output .= '</div>';
                        $output .= '</div>';
                    $output .= '</div>';
                    wp_die($output);
                }
//            }
//            echo __METHOD__;
//            wp_die();
        }


        public function hooks(){
            parent::hooks();

            if($this -> my_post_type_exists()) {
                $post_type  = $this -> get_post_type();

                add_action('edit_form_after_title', array($this, 'generate_template_options'));
                add_action( 'save_post', array( $this, 'save_main_options' ), 10, 2 );

                // Create duplicate action
                add_filter('post_row_actions', array($this, 'duplicate_post_link'), 10, 2);

                // Duplicate action store
                add_action( 'admin_action_'.$post_type.'_duplicate', array($this, 'post_type_duplicate') );

                // Delete post action
                add_action( 'before_delete_post', array($this, 'delete_post_config') );

                // Remove templates post attributes
                add_filter("theme_{$post_type}_templates", array($this, 'remove_templates'));


                add_action( 'wp_ajax_mm_edit_widget', array( $this, 'ajax_show_widget_form' ) );

            }
            add_action('admin_footer', function(){
                $t  = \Redux::instance($this -> setting_args[$this -> get_post_type()]['opt_name']);
                if($t) {
                    $t->_enqueue();
                }
                if(!$this ->my_post_type_exists()) {
                    wp_add_inline_script('redux-js', '
                    (function($){ 
//                            $(document).ready(function{                   
//                                // Prevent WP from asking confirmation to navigate away from the current post.
//                                $(window).off( \'beforeunload.edit-post\' );
//                            });
                        $(window).load(function(){
                            $.redux.initFields();
                        });
                    })(jQuery);');
                }


                if(get_the_ID() == 2583){
                    $widget_id  = 'text-4';
                    $nonce = wp_create_nonce('megamenu_save_widget_' . $widget_id);


                    wp_enqueue_editor();
                    wp_enqueue_media();
                    wp_enqueue_script( 'text-widgets' );
                    wp_add_inline_script( 'text-widgets', 'wp.textWidgets.init();', 'after' );

                    wp_add_inline_script('redux-js', '
                (function($){

                    $(document).ready(function(){
                        var id = "text-4",
                            action = "mm_edit_widget";
                        var jqxhr =$.post("'.admin_url('admin-ajax.php').'", {
                            action: action,
                            widget_id: id,
                            post: 2583,
    //                        _wpnonce: "'.$nonce.'"
                        }, function(response) {
                            $("#41_section_group").prepend(response);
                            var widget = $("#41_section_group").find(".widget");
                            
                            widget.toggleClass("open");
                            console.log(widget);
                            
                            setTimeout(function(){
                                // fix for WordPress 4.8 widgets when lightbox is opened, closed and reopened
                                if (wp.textWidgets !== undefined) {
                                    wp.textWidgets.widgetControls = {}; // WordPress 4.8 Text Widget
                                }
    
                                if (wp.mediaWidgets !== undefined) {
                                    wp.mediaWidgets.widgetControls = {}; // WordPress 4.8 Media Widgets
                                }
    
                                if (wp.customHtmlWidgets !== undefined) {
                                    wp.customHtmlWidgets.widgetControls = {}; // WordPress 4.9 Custom HTML Widgets
                                }
    
                                $(document).trigger("widget-added", [widget]);
    
                                if (\'acf\' in window) {
                                    acf.getFields(document);
                                }
                            }, 100);
                        });
                        jqxhr.error(function(){
                            console.log(jqxhr);
                        });
                    });
                })(jQuery);
                ');
                }
            }, 99);
        }

        protected function _init_arguments() {
            $theme = wp_get_theme(); // For use with some settings. Not necessary.
            $this -> setting_args['settings']   = $this -> framework -> get_arguments();
            $args               = $this -> setting_args['settings'];

            $args['opt_name']      .= '-' . $this->get_post_type();

            $args['dev_mode']       = false;
            $args['database']       = '';
            $args['ajax_save']      = false;
            $args['hide_save']      = true;
            $args['menu_type']      = 'hidden';
            $args['hide_reset']     = true;
//            $args['open_expanded']  = true;
            $args['display_name']   = __('Template Settings', $this->text_domain);

            // Get option values from file and load to fields
            add_filter("pre_option_{$args['opt_name']}", function($options){
                if($this -> my_post_type_exists() && isset($_GET['post']) && $_GET['post']
                    && isset($_GET['action']) && $_GET['action'] == 'edit'){
                    $post_id    = $_GET['post'];
                    $pID = get_post_meta($post_id, '_' . $this -> get_post_type(), true);

                    if ($pID) {
                        $file = TEMPLAZA_FRAMEWORK_THEME_PATH . '/theme_options/' . $pID . '.json';
                        if (file_exists($file)) {
                            require_once(ABSPATH . '/wp-admin/includes/file.php');
                            global $wp_filesystem;
                            WP_Filesystem();

                            $options = $wp_filesystem->get_contents($file);
//                            $options = html_entity_decode(stripslashes($options));
                            $options = stripslashes($options);

                            $options = json_decode($options, true);
                        }
                    }
                }

                return $options;
            });

            $this -> setting_args[$this -> get_post_type()]   = $args;
        }

        public function init_main_options(){
            $core_file     = TEMPLAZA_FRAMEWORK_OPTION_PATH.'/config.php';
            if(file_exists($core_file)){
                require_once $core_file;
            }
            $core_file     = TEMPLAZA_FRAMEWORK_THEME_PATH_OPTION.'/config.php';
            if(file_exists($core_file)){
                require_once $core_file;
            }

            $this -> _init_arguments();

            if($sections = \Templaza_API::construct_sections($this -> get_post_type())) {

                if(count($sections)) {
                    $args       = $this -> setting_args[$this -> get_post_type()];
                    $opt_name   = $args['opt_name'];

                    \Templaza_API::load_my_fields($opt_name);

                    \Redux::set_args($opt_name, $args);
                    \Redux::set_sections($opt_name, $sections);
                    $path = TEMPLAZA_FRAMEWORK_CORE_PATH . '/extensions/';
                    \Redux::set_extensions($opt_name, $path);

                    \Redux::init($opt_name);
                }
            }
        }

        public function remove_templates($post_templates){
            return array();
        }

        /*
         * Add duplicate post link
         * @param array $actions
         * @param object $post
         * */
        public function duplicate_post_link($actions, $post){
            if(isset($actions['clone'])){
                unset($actions['clone']);
            }
            if ($post->post_type==$this -> get_post_type())
            {
                $action = $this -> get_post_type().'_duplicate';
                $nonce  = wp_create_nonce( $action );
                $actions['duplicate'] = '<a href="admin.php?action='.$action.'&post='.$post -> ID.'&_wpnonce='
                    .$nonce.'" title="" rel="permalink">'.esc_html__('Duplicate', $this -> text_domain).'</a>';
            }
            return $actions;
        }

        /*
         * Delete post config file from theme
         * @param string|int $postid
         * */
        public function delete_post_config($postid){
            // Get post type by post id
            $post_type = \get_post_type($postid);
            if($post_type != $this ->get_post_type()){
                return;
            }
            $theme_name = \get_post_meta($postid, '_'.$this -> get_post_type().'_theme', true);
            $file_name  = \get_post_meta($postid, '_'.$this -> get_post_type(), true);

            require_once ( ABSPATH . '/wp-admin/includes/file.php' );
            global $wp_filesystem;
            WP_Filesystem();
            $file    = dirname(get_template_directory()).'/'.$theme_name.'/'.TEMPLAZA_FRAMEWORK_NAME
                .'/theme_options/'.$file_name.'.json';

            if(file_exists($file)){
                $wp_filesystem -> delete($file);
            }
        }

        /*
         * Add duplicate post link
         * @param array $actions
         * @param object $post
         * */
        public function post_type_duplicate(){
            $post_type      = $this -> get_post_type();
            $nonce_name     = isset( $_GET['_wpnonce'] ) ? $_GET['_wpnonce'] : '';
//            $nonce_action   = $post_type.'_duplicate';
            $nonce_action   = isset( $_GET['action'] ) ? $_GET['action'] : '';;

            // Check if nonce is valid.
            if ( ! wp_verify_nonce( $nonce_name, $nonce_action ) ) {
                wp_die('Security issue occure, Please try again!.');
            }
            $post_id    = isset($_GET['post'])?$_GET['post']:0;
            if(!$post_id){
                wp_die(__('Post or Page creation failed, could not find original post:', $this -> text_domain) . $post_id);
            }

            $post = get_post( $post_id );
            $current_user = wp_get_current_user();
            $post_author = $current_user->ID;

            if (isset( $post ) && $post != null) {
                global $wpdb;
                $args = array(
                    'comment_status' => $post->comment_status,
                    'ping_status' => $post->ping_status,
                    'post_author' => $post_author,
                    'post_content' => $post->post_content,
                    'post_excerpt' => $post->post_excerpt,
                    'post_name' => $post->post_name,
                    'post_parent' => $post->post_parent,
                    'post_password' => $post->post_password,
                    'post_status' => 'draft',
                    'post_title' => $post->post_title,
                    'post_type' => $post->post_type,
                    'to_ping' => $post->to_ping,
                    'menu_order' => $post->menu_order
                );
                $clone_post_id = wp_insert_post( $args );

                $taxonomies = get_object_taxonomies($post->post_type);
                if (!empty($taxonomies) && is_array($taxonomies)){
                    foreach ($taxonomies as $taxonomy) {
                        $post_terms = wp_get_object_terms($post_id, $taxonomy, array('fields' => 'slugs'));
                        wp_set_object_terms($clone_post_id, $post_terms, $taxonomy, false);
                    }
                }

                $post_meta_data = $wpdb->get_results("SELECT meta_key, meta_value FROM $wpdb->postmeta WHERE post_id=$post_id");
                if (count($post_meta_data)!=0) {

                    $theme_name         = '';
                    $file_option_name   = '';

                    $clone_query = "INSERT INTO $wpdb->postmeta (post_id, meta_key, meta_value) ";
                    foreach ($post_meta_data as $meta_data) {
                        $meta_key = sanitize_text_field($meta_data->meta_key);
                        $meta_value = addslashes($meta_data->meta_value);

                        if($meta_key == '_'.$post_type.'_theme'){
                            $theme_name = $meta_value;
                        }
                        if($meta_key == '_'.$post_type){
                            $file_option_name   = $meta_value;
                            $meta_value         = $clone_post_id;
                        }

                        $clone_query_select[]= "SELECT $clone_post_id, '$meta_key', '$meta_value'";

                    }
                    $clone_query.= implode(" UNION ALL ", $clone_query_select);
                    $wpdb->query($clone_query);

                    // Duplicate options file
                    require_once ( ABSPATH . '/wp-admin/includes/file.php' );
                    global $wp_filesystem;
                    WP_Filesystem();
                    $theme_base_path    = dirname(get_template_directory()).'/'.$theme_name.'/'.TEMPLAZA_FRAMEWORK_NAME
                        .'/theme_options';
                    $source_file   = $theme_base_path.'/'.$file_option_name.'.json';
                    if(file_exists($source_file)){
                        $new_file   = $theme_base_path.'/'.$clone_post_id.'.json';
                        $wp_filesystem -> copy($source_file, $new_file, true);
                    }

                }
                do_action("templaza-framework/post-type/{$post_type}/duplicate", $clone_post_id, $post_id);
                wp_redirect(admin_url('edit.php?post_type='.$post_type));
                exit;
            }
        }

        public function enqueue(){
            parent::enqueue();

            if($this -> my_post_type_exists()) {
                // Remove auto save
                wp_dequeue_script('autosave');
            }

            wp_register_style(TEMPLAZA_FRAMEWORK_NAME.'__css-metabox',
                Functions::get_my_frame_url().'/assets/css/metabox.css');
            wp_enqueue_style(TEMPLAZA_FRAMEWORK_NAME.'__css-metabox');
        }

        /**
         * Modify query of post type (added filter by theme name for list page).
         */
        public function parse_query($query ){
            if(isset($query -> query_vars['post_type'])) {
                $query->set('meta_query', array(
                    array(
                        'key' => '_' . $query->query_vars['post_type'] . '_theme',
                        'value' => basename(get_template_directory()), // This cannot be empty because of a bug in WordPress
                        'compare' => '='
                    )
                ));
            }
            $query->query_vars['post__in']  = array();
            return $query;
        }

        public function generate_template_options($post){

            $post_type  = $this -> get_post_type();
            $opt_name   = $this -> setting_args[$post_type]['opt_name'];

            if($redux  = \Redux::instance($opt_name)) {
                $redux->_register_settings();
                $redux->generate_panel();
            }
        }

        public function save_main_options($post_id, $post){

            // Store main config to json file
            $setting_args = $this -> setting_args[$this -> get_post_type()];
            $main_param_name = $setting_args['opt_name'];
//            $main_param_name = $this -> framework -> args['opt_name'];

            if(isset($_POST[$main_param_name])) {
                global $wp_filesystem;
                WP_Filesystem();

                $data   = $_POST[$main_param_name];

                if(count($data)){
                    // Create config file
                    $wp_filesystem->put_contents(TEMPLAZA_FRAMEWORK_THEME_PATH . '/theme_options/' . $post_id . '.json', json_encode($data));

                    update_post_meta( $post_id, '_'.$this -> get_post_type(), $post_id );

                    // Store theme name
                    update_post_meta( $post_id, '_'.$this -> get_post_type().'_theme', basename(get_template_directory()) );
                }
            }
        }

        public function load_metaboxes($path){
            if(!$path || ($path && !is_dir($path))){
                return false;
            }
            require_once ( ABSPATH . '/wp-admin/includes/file.php' );

            $folders  = list_files($path, 1);
            if(count($folders)){
                foreach ($folders as $folder){
                    $file_name  = basename($folder);
                    $file       = $folder.$file_name.'.php';

                    if(file_exists($file)){
                        require_once $file;
                    }

                    $class_name = 'TemplazaFramework_MetaBox_'.ucfirst($file_name);
                    if(class_exists($class_name)){
                        new $class_name($this, $this -> framework);
                    }
                }
            }
        }
    }
}