<?php

defined('TEMPLAZA_FRAMEWORK') or exit();

use TemPlazaFramework\Post_TypeFunctions;

if(!class_exists('TemplazaFramework_MetaBox_Layout_Assign')){
    class TemplazaFramework_MetaBox_Layout_Assign extends TemplazaFramework_MetaBox{

        public function register(){
            $metaboxes[] = array(
                'id'            => 'layout-assign',
                'title'         => __( 'Template', $this -> text_domain ),
                'post_types'    => 'templaza_header',
                'position'      => 'side', // normal, advanced, side
                'priority'      => 'default', // high, core, default, low - Priorities of placement
                'store_each'    => true, // Store value of each fields to each post meta
                'sections'      => array(
                    array(
                        'fields' => array(
                            array(
                                'id'       => '__home',
                                'type'     => 'switch',
                                'title'    => esc_html__('Default', $this -> text_domain),
//                                'subtitle' => __('This template style will be defined as the global default template style.', $this -> text_domain),
                            ),
                        ),
                    ),
                ),
            );

            return $metaboxes;
        }

        public function hooks()
        {
            parent::hooks(); // TODO: Change the autogenerated stub

//            add_filter("redux/options/{$this->prefix}templaza-options/wordpress_data/translate/post_type_value",
//                array($this, 'meta_box_basic_post_type_value'), 10, 2);


            if(is_user_logged_in() && is_admin()){
                $post_types = array('templaza_header');
                $post_type  = $this -> post_type ->  get_current_screen_post_type();

                if(in_array($post_type, $post_types)){
                    // Add header column to post type list
                    if(method_exists($this,'post_type_table_head')) {
                        add_filter('manage_'.$post_type.'_posts_columns', array($this, 'post_type_table_head'));
                    }
                    // Add header column to post type list
                    if(method_exists($this,'post_type_table_content')) {
                        add_filter('manage_'.$post_type.'_posts_custom_column', array($this, 'post_type_table_content'), 10, 2);
                    }

                    // Ordering column
                    if(method_exists($this,'post_type_table_sorting')) {
                        add_filter( 'manage_edit-'.$post_type.'_sortable_columns', array($this, 'post_type_table_sorting' ) );
                    }
                    // Order by column added
                    if(method_exists($this,'post_type_orderby')) {
                        add_filter( 'request', array($this, 'post_type_orderby' ) );
                    }
                    // Duplicate post action
                    add_action("templaza-framework/post-type/{$post_type}/duplicate", array($this, 'post_duplicate'), 11, 2);

                    // Set home for post type
                    add_action( 'admin_action_'.$post_type.'_set_default', array($this, 'post_type_set_default') );

                }
            }

        }

        /*
         * Set home meta box field to 0
         * @param string|int $new_post_id
         * @param string|int $post_id
         * */
        public function post_duplicate($new_post_id, $post_id){
            update_post_meta($new_post_id, '__home', 0);
        }

        /*
         * Add columns for header custom post type in list page
         * @param array $columns
         * */
        public function post_type_table_head($columns){

            $pos            = array_search('title', array_keys($columns)) + 1;
            $new_columns    = array('__home' => esc_html__('Default', $this -> text_domain));

            return array_merge(
                array_slice($columns, 0, $pos),
                $new_columns,
                array_slice($columns, $pos)
            );
        }

        /*
         * Add columns for content custom post type in list page
         * @param string $column_name
         * @param string $post_id
         * */
        public function post_type_table_content($column_name, $post_id ){
            if ($column_name == '__home') {
                global $post_type;
                $home   = get_post_meta($post_id,'__home', true);
                $action = $post_type.'_set_default';
                $nonce  = wp_create_nonce( $action );
                $href   = 'admin.php?action='.$action.'&post='.$post_id.'&_wpnonce='
                    .$nonce.'" class="button button-micro'.($home?' disabled':'');
                if($home){
                    $href   = 'javascript:void();';
                }
                echo '<a href="'.$href.'" class="button button-micro'.($home?' disabled':'').'"'.($home?' disabled':'').'>';
                if($home){
                    echo '<span class="dashicons dashicons-star-filled featured"></span>';
                }else{
                    echo '<span class="dashicons dashicons-star-empty"></span>';
                }
                echo '</a>';
            }
        }

        /*
         * Sorting columns for custom post type in list page
         * @param array $columns
         * */
        public function post_type_table_sorting($columns ){
            $columns['__home'] = '__home';
            return $columns;
        }

        /*
         * Order by query for custom post type in list page
         * @param array $vars
         * */
        public function post_type_orderby( $vars ) {
            if ( isset( $vars['orderby'] ) && '__home' == $vars['orderby'] ) {
                $vars = array_merge( $vars, array(
                    'meta_key' => '__home',
                    'orderby' => 'meta_value'
                ) );
            }

            return $vars;
        }

        /*
         * Reset value of select field with data is post
         * */
        public function meta_box_basic_post_type_value($value, $post_type){
            if(is_array($value)){
                return array();
            }else{
                return '';
            }
        }

        /*
         * Action set home for custom post type in list page
         * */
        public function post_type_set_default(){
            $post_type      = $this -> post_type -> get_current_screen_post_type();
            $nonce_name     = isset( $_GET['_wpnonce'] ) ? $_GET['_wpnonce'] : '';
            $nonce_action   = $post_type.'_set_default';

            // Check if nonce is valid.
            if ( ! wp_verify_nonce( $nonce_name, $nonce_action ) ) {
                wp_die('Security issue occure, Please try again!.');
            }
            $post_id    = isset($_GET['post'])?$_GET['post']:0;
            if(!$post_id){
                wp_die(__('Post or Page creation failed, could not find original post:', $this -> text_domain) . $post_id);
            }

            $this -> _disable_home_without_post_id($post_id);

            // Set post by post_id to home
            update_post_meta($post_id, '__home', 1);

            wp_redirect(admin_url('edit.php?post_type='.$post_type));
            exit;
        }

        public function save_meta_box($post_id, $post)
        {
            parent::save_meta_box($post_id, $post);

            $mt_key  = $this -> prefix.'default-layout';
            if ( isset( $_POST[$mt_key] ) ) {
                $options    = $_POST[$mt_key];
                if(isset($options['__home']) && $options['__home'] == 1){
                    $this -> _disable_home_without_post_id($post_id);
                }
            }
        }

        /*
         * Disable home for all posts without post_id
         * @param string|int $post_id
         * */
        protected function _disable_home_without_post_id($post_id){
            global $wpdb;

            $post_type  = get_post_type($post_id);

            $query  = 'UPDATE '.$wpdb -> postmeta.' AS pm ';
            $query .= 'INNER JOIN '.$wpdb -> posts.' AS p ON p.ID = pm.post_id AND p.post_type="'.$post_type.'" ';
            $query .= 'SET meta_value=0 ';
            $query .= 'WHERE meta_key="__home" AND post_id <> '.$post_id;

            $wpdb ->query($query);
        }
    }
}